@use "sass:color";

// mixins

@mixin grid($grid: true) {
    @if $grid {
        display: grid;
        grid-template-columns: 10rem 10rem;
        grid-template-rows: 5rem 5rem;
        grid-auto-rows: 5rem;
        gap: 5px;
        padding: var(--gen-padding);
    } @else {
        display: flex;
        flex-direction: row;
        border: 1px solid var(--brand-color);
    }
}

.row-grid {
    @include grid;
}

.row-flex {
    @include grid(false)
}

//extends

.alert {
    border: 1px solid black;
    padding: 1rem;
    // background-color: red;
    color: white;
    margin-bottom:15px;

    &-success {
        @extend .alert;
        background-color:#33FF57;
    }
}

//FUNCTIONS
// You can create your own functions for specific operations that you need to reuse in your project. They
// are created with the @function rule and return a value using the @return rule.

@function add($a, $b) {
    @return $a + $b;
}

.ordered-item {
    order: add(1,2);
}

//with default value
@function add-def($a, $b: 2){
    @return $a + $b;
}

.ordered-item-def {
    order: add-def(1);
}

//Special values
//maps

$font-size: (
    "small": 12px,
    "default": 16px,
    "large": 20px
);

.lead-paragraph{
    font-size: map-get($font-size, "large");
}

//BUILT-IN-MODULES
// Sass provides built-in modules containing various functions and mixins. These functions were
// originally globally available, but should now be loaded via the @use rule (with few exceptions).
// Among the more useful functions are functions for manipulating color values and working with
// list- and map-based values.


$primary-color: blue;

.button {
    color: $primary-color;
    border: 1px solid scale-color($primary-color, $lightness: 25%);
}